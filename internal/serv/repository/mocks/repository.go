// Code generated by MockGen. DO NOT EDIT.
// Source: ./repository.go

// Package mock_repository is a generated GoMock package.
package mock_repository

import (
	context "context"
	repository "homework-6/internal/serv/repository"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockIArticleRepo is a mock of IArticleRepo interface.
type MockIArticleRepo struct {
	ctrl     *gomock.Controller
	recorder *MockIArticleRepoMockRecorder
}

// MockIArticleRepoMockRecorder is the mock recorder for MockIArticleRepo.
type MockIArticleRepoMockRecorder struct {
	mock *MockIArticleRepo
}

// NewMockIArticleRepo creates a new mock instance.
func NewMockIArticleRepo(ctrl *gomock.Controller) *MockIArticleRepo {
	mock := &MockIArticleRepo{ctrl: ctrl}
	mock.recorder = &MockIArticleRepoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIArticleRepo) EXPECT() *MockIArticleRepoMockRecorder {
	return m.recorder
}

// AddArticles mocks base method.
func (m *MockIArticleRepo) AddArticles(ctx context.Context, article *repository.Article) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddArticles", ctx, article)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddArticles indicates an expected call of AddArticles.
func (mr *MockIArticleRepoMockRecorder) AddArticles(ctx, article interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddArticles", reflect.TypeOf((*MockIArticleRepo)(nil).AddArticles), ctx, article)
}

// AddPost mocks base method.
func (m *MockIArticleRepo) AddPost(ctx context.Context, post *repository.Post) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddPost", ctx, post)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddPost indicates an expected call of AddPost.
func (mr *MockIArticleRepoMockRecorder) AddPost(ctx, post interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddPost", reflect.TypeOf((*MockIArticleRepo)(nil).AddPost), ctx, post)
}

// Delete mocks base method.
func (m *MockIArticleRepo) Delete(ctx context.Context, id int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockIArticleRepoMockRecorder) Delete(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockIArticleRepo)(nil).Delete), ctx, id)
}

// GetByID mocks base method.
func (m *MockIArticleRepo) GetByID(ctx context.Context, id int64) ([]*repository.JoinArticlePost, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByID", ctx, id)
	ret0, _ := ret[0].([]*repository.JoinArticlePost)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByID indicates an expected call of GetByID.
func (mr *MockIArticleRepoMockRecorder) GetByID(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByID", reflect.TypeOf((*MockIArticleRepo)(nil).GetByID), ctx, id)
}

// Update mocks base method.
func (m *MockIArticleRepo) Update(ctx context.Context, article *repository.Article) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", ctx, article)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Update indicates an expected call of Update.
func (mr *MockIArticleRepoMockRecorder) Update(ctx, article interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockIArticleRepo)(nil).Update), ctx, article)
}
